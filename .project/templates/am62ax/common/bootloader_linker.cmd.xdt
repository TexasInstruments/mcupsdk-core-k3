%%{
    let options = args.options;

    let stackSize = 16*1024;
    let heapSize =  32*1024;

    let irqStackSize = 4*1096;
    let svcStackSize = 256;
    let fiqStackSize = 256;
    let abortStackSize = 256;
    let undefinedStackSize = 256;

    if(options && options.stackSize)
        stackSize = options.stackSize;
    if(options && options.heapSize)
        heapSize = options.heapSize;
    if(options && options.irqStackSize)
        irqStackSize = options.irqStackSize;
    if(options && options.fiqStackSize)
        fiqStackSize = options.fiqStackSize;
    if(options && options.svcStackSize)
        svcStackSize = options.svcStackSize;
    if(options && options.abortStackSize)
        abortStackSize = options.abortStackSize;
    if(options && options.undefinedStackSize)
        undefinedStackSize = options.undefinedStackSize;

%%}

--stack_size=`stackSize`
--heap_size=`heapSize`

% if(args.project.isBootLoader == true){
-e_vectors_sbl  /* for SBL make sure to set entry point to _vectors_sbl */
% } else {
-e_vectors  /* for SBL make sure to set entry point to _vectors_sbl */
% }
__IRQ_STACK_SIZE = `irqStackSize`;
__FIQ_STACK_SIZE = `fiqStackSize`;
__SVC_STACK_SIZE = `svcStackSize`;
__ABORT_STACK_SIZE = `abortStackSize`;
__UNDEFINED_STACK_SIZE = `undefinedStackSize`;

SECTIONS
{
    % if(args.project.isBootLoader == true){
    .vectors:{} palign(8) > HSM_RAM_VECS
    GROUP {
        .text:   {} palign(8)
        .const:  {} palign(8)
        .text.hwi: palign(8)
        .text.cache: palign(8)
        .text.mpu: palign(8)
        .text.boot: palign(8)
        .data:   {} palign(8)
        .rodata: {} palign(8)
        .boardcfg_data   : {} palign(8)
    } > HSM_RAM
    .bss:    {} palign(8) > HSM_RAM
    RUN_START(__BSS_START)
    RUN_END(__BSS_END)
    .sysmem: {} palign(8) > HSM_RAM
    .stack:  {} palign(8) > HSM_RAM
    GROUP {
        .irqstack: {. = . + __IRQ_STACK_SIZE;} align(8)
        RUN_START(__IRQ_STACK_START)
        RUN_END(__IRQ_STACK_END)
        .fiqstack: {. = . + __FIQ_STACK_SIZE;} align(8)
        RUN_START(__FIQ_STACK_START)
        RUN_END(__FIQ_STACK_END)
        .svcstack: {. = . + __SVC_STACK_SIZE;} align(8)
        RUN_START(__SVC_STACK_START)
        RUN_END(__SVC_STACK_END)
        .abortstack: {. = . + __ABORT_STACK_SIZE;} align(8)
        RUN_START(__ABORT_STACK_START)
        RUN_END(__ABORT_STACK_END)
        .undefinedstack: {. = . + __UNDEFINED_STACK_SIZE;} align(8)
        RUN_START(__UNDEFINED_STACK_START)
        RUN_END(__UNDEFINED_STACK_END)
    } > HSM_RAM
    % } else {
    .vectors:{} palign(8) > DDR2

    GROUP {
        .const:  {} palign(8)
        .text:   {} palign(8)
        .text.hwi: palign(8)
        .text.cache: palign(8)
        .text.mpu: palign(8)
        .text.boot: palign(8)
        .data:   {} palign(8)
        .rodata: {} palign(8)
        .boardcfg_data   : {} palign(8)
    } > DDR2

    .bss:    {} palign(8) > DDR2
    RUN_START(__BSS_START)
    RUN_END(__BSS_END)
    .sysmem: {} palign(8) > DDR2
    .stack:  {} palign(8) > DDR2

    GROUP {
        .irqstack: {. = . + __IRQ_STACK_SIZE;} align(8)
        RUN_START(__IRQ_STACK_START)
        RUN_END(__IRQ_STACK_END)
        .fiqstack: {. = . + __FIQ_STACK_SIZE;} align(8)
        RUN_START(__FIQ_STACK_START)
        RUN_END(__FIQ_STACK_END)
        .svcstack: {. = . + __SVC_STACK_SIZE;} align(8)
        RUN_START(__SVC_STACK_START)
        RUN_END(__SVC_STACK_END)
        .abortstack: {. = . + __ABORT_STACK_SIZE;} align(8)
        RUN_START(__ABORT_STACK_START)
        RUN_END(__ABORT_STACK_END)
        .undefinedstack: {. = . + __UNDEFINED_STACK_SIZE;} align(8)
        RUN_START(__UNDEFINED_STACK_START)
        RUN_END(__UNDEFINED_STACK_END)
    } > DDR2
    % }
    %if(args.project.isFileBuf){
    .bss.filebuf (NOLOAD) : {} > APPIMAGE
    % } else {
    .bss.app(NOLOAD) : {} > APPIMAGE
    % }
}

MEMORY
{
    %if(args.project.isBootLoader == true){
    HSM_RAM_VECS: ORIGIN = 0x43C00000 , LENGTH = 0x100
    HSM_RAM  : ORIGIN = 0x43C00100 , LENGTH = 0x3c800 - 0x100

    /* This section is used by the SBL to temporarily load the appimage for authentication */
    %if(args.project.isFileBuf){
    APPIMAGE  : ORIGIN = 0x84000000 , LENGTH = 0x2000000
    % } else {
    APPIMAGE  : ORIGIN = 0x84000000 , LENGTH = 0x800000
    % }
    % } else {
    DDR2         : ORIGIN = 0xB0340000 , LENGTH = 0x200000

    /* This section is used by the SBL to temporarily load the appimage for authentication */
    APPIMAGE  : ORIGIN = 0x84000000 , LENGTH = 0x2000000
    % }
}
