%%{
    let common = system.getScript("/common");
    let module = system.modules['/board/flash/flash'];
    let serialmodule = system.modules['/board/flash/serialFlash/serialflash'];
    let parallelmodule = system.modules['/board/flash/parallelFlash/parallelflash'];
%%}

% for(let i = 0; i < module.$instances.length; i++) {
% let instance = module.$instances[i];
% let config = module.getInstanceConfig(instance);
% let soc = system.getScript(`/board/soc/board_${common.getSocName()}`);
% let path;
% if(config.flashTopology == "serialFlash") {
    % let flashDriverVer = soc.getDriverVer("serialFlash");
    % path = '/board/flash/serialFlash/templates/' + flashDriverVer + '/flash_open_close_config.c.xdt';
%} else if (config.flashTopology == "parallelFlash") {
    % let flashDriverVer = soc.getDriverVer("parallelFlash");
    % path = '/board/flash/parallelFlash/templates/' + flashDriverVer + '/flash_open_close_config.c.xdt';
%}
`system.getTemplate(path)()`
%}

/* FLASH Driver handles - opened during Board_flashOpen() */
Flash_Handle gFlashHandle[CONFIG_FLASH_NUM_INSTANCES];

/* FLASH Config */
Flash_Config gFlashConfig[CONFIG_FLASH_NUM_INSTANCES] =
{
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % let typeStr = common.camelSentence(config.type);
    % if(config.flashTopology == "serialFlash") {
    {
        % let instanceSerial = serialmodule.$instances[0];
        % let configserial = serialmodule.getInstanceConfig(instanceSerial);
        .attrs = &gFlashAttrs_`configserial.fname`,
        % if (configserial.flashType == "SERIAL_NAND") {
        .fxns = &gFlashNandOspiFxns,
        % } if (configserial.flashType == "SERIAL_NOR") {
        .fxns = &gFlashNorOspiFxns,
        % }
        .devConfig = &gFlashDevCfg_`configserial.fname`,
        .object = (void *)&gFlashObject_`configserial.fname`,
    },
    % } else if(config.flashTopology == "parallelFlash"){
    {

        % let instanceparallel = parallelmodule.$instances[0];
        % let configparallel = parallelmodule.getInstanceConfig(instanceparallel);
        .attrs = &gFlashAttrs_`configparallel.fname`,
        % if (configparallel.flashType == "PARALLEL_NAND") {
        .fxns = &gFlashNandGpmcFxns,
        % }
        .devConfig = &gFlashDevCfg_`configparallel.fname`,
        .object = (void *)&gFlashObject_`configparallel.fname`,
    },
    % }
% }
};

/* FLASH Open Params - populated from SysConfig options */
Flash_Params gFlashParams[CONFIG_FLASH_NUM_INSTANCES] =
{
    % for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(config.flashTopology == "serialFlash") {
    {
        % let instanceSerial = serialmodule.$instances[0];
        % let configserial = serialmodule.getInstanceConfig(instanceSerial);
        % if (configserial.quirks != "") {
        .quirksFxn = `configserial.quirks`,
        % } else {
        .quirksFxn = NULL,
        % }
        .custProtoFxn = `configserial.customProtoFxn`,
    },
    % } else if(config.flashTopology == "parallelFlash") {
    {

        .quirksFxn = NULL,
        .custProtoFxn = NULL,
    },
    % }
    % }
};

uint32_t gFlashConfigNum = CONFIG_FLASH_NUM_INSTANCES;

int32_t Board_flashOpen()
{
    uint32_t instCnt;
    int32_t  status = SystemP_SUCCESS;

    for(instCnt = 0U; instCnt < CONFIG_FLASH_NUM_INSTANCES; instCnt++)
    {
        gFlashHandle[instCnt] = NULL;   /* Init to NULL so that we can exit gracefully */
    }

    /* Set the underlying driver instance to the FLASH config */
% for(let i = 0; i < module.$instances.length; i++) {
    % let instance = module.$instances[i];
    % let config = module.getInstanceConfig(instance);
    % if(config.flashTopology == "serialFlash"){
        % let instanceSerial = serialmodule.$instances[0];
        % let configserial = serialmodule.getInstanceConfig(instanceSerial);
        % let peripheralDriver = instanceSerial.peripheralDriver;
    gFlashAttrs_`configserial.fname`.driverInstance = `peripheralDriver.$name.toUpperCase()`;
    % } else if(config.flashTopology == "parallelFlash"){
        % let instanceParallel = parallelmodule.$instances[0];
        % let configparallel = parallelmodule.getInstanceConfig(instanceParallel);
        % let peripheralDriver = instanceParallel.peripheralDriver;
    gFlashAttrs_`configparallel.fname`.driverInstance = `peripheralDriver.$name.toUpperCase()`;
    %}
% }

    /* Open all instances */
    for(instCnt = 0U; instCnt < CONFIG_FLASH_NUM_INSTANCES; instCnt++)
    {

        gFlashHandle[instCnt] = Flash_open(instCnt, &gFlashParams[instCnt]);
        if(NULL == gFlashHandle[instCnt])
        {
            DebugP_logError("FLASH open failed for instance %d !!!\r\n", instCnt);
            status = SystemP_FAILURE;
            break;
        }
    }

    if(SystemP_FAILURE == status)
    {
        Board_flashClose();   /* Exit gracefully */
    }
    return status;
}

void Board_flashClose(void)
{
    uint32_t instCnt;

    /* Close all instances that are open */
    for(instCnt = 0U; instCnt < CONFIG_FLASH_NUM_INSTANCES; instCnt++)
    {
        if(gFlashHandle[instCnt] != NULL)
        {
            Flash_close(gFlashHandle[instCnt]);
            gFlashHandle[instCnt] = NULL;
        }
    }
    return;
}
