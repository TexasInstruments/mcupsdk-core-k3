
let common = system.getScript("/common");

function getCpuID() {
    return system.getScript(`/drivers/soc/drivers_${common.getSocName()}`).getCpuID();
}

function getUartConfigSupported() {

    let socName = common.getSocName();
    let uartConfigSupported = true;

    return uartConfigSupported;
}

function getSharedMemLogSupported() {

    let socName = common.getSocName();
    let sharedMemLogSupported = true;

    return sharedMemLogSupported;
}

function validate(instance, report) {

    /* multi-script validation  */
    let coreNames = common.getSysCfgCoreNames();
    let selfCoreName = common.getSelfSysCfgCoreName();

    for ( let remoteCoreName of coreNames)
    {
        if( remoteCoreName != selfCoreName)
        {
            let remote_core_instance = common.getStaticModuleForCore('/kernel/dpl/debug_log', remoteCoreName);

            if(remote_core_instance && instance.enableSharedMemLogReader === true && remote_core_instance.enableSharedMemLogReader === true)
            {
                /* if UART log is enabled at this core, then it should not be enabled at other cores */
                report.logError(`Shared memory log reader can be enabled on one core only, disable at this core or at ${remoteCoreName}`,
                                instance, "enableSharedMemLogReader");
            }
        }
    }
}

function getConfig(){
    let cfg = [
        {
            name: "enableLogZoneError",
            displayName: "Enable Error Log Zone",
            default: true,
        },
        {
            name: "enableLogZoneWarning",
            displayName: "Enable Warning Log Zone",
            default: true,
        },
        {
            name: "enableLogZoneInfo",
            displayName: "Enable Info Log Zone",
            default: false,
        },
        {
            name: "enableMemLog",
            displayName: "Enable Memory Log",
            description: "Logs string to memory. This can be viewed via ROV in CCS",
            default: false,
        },
        {
            name: "enableUartLog",
            displayName: "Enable UART Log",
            description: `Logs string to UART.`,
            longDescription:
`Configure the UART to use for logging, using options shown below on this page.
This also enables UART for console input via the DebugP_readLine and DebugP_scanf APIs.

Make sure to open the UART driver in order for the logs to be visible on the UART console.
UART driver is opened when Drivers_open() that is generated by SysConfig is called.
`,
            default: false,
            readOnly: !getUartConfigSupported(),
            hidden: !getUartConfigSupported(),
            onChange : function(inst,ui){
                if(inst.enableUartLog == true)
                {
                    ui.uartTrace.hidden = false;
                }
                else
                {
                    ui.uartTrace.hidden = true;
                }
            }
        },
        {
            name :"uartTrace",
            displayName : "Remote Core Trace (UART)",
            description: `Uart used for remote core trace`,
            hidden : true,
            default : false,
        },
        {
            name :"sysfwUartTrace",
            displayName : "SysFw UART Trace",
            description: `Uart used for sysfw trace logs.`,
            hidden : false,
            default : false,
        },
        {
            name: "enableSharedMemLog",
            displayName: "Enable Shared Memory Log Writer",
            description: `Logs string to shared memory, some other core should have shared memory
                            log reader enabled to output these logs to a UART or CCS console`,
            default: false,
            readOnly: !getSharedMemLogSupported(),
            hidden: !getSharedMemLogSupported(),
        },
        {
            name: "enableSharedMemLogReader",
            displayName: "Enable Shared Memory Log Reader",
            description: `Reads strings logged from other remote cores and output them to the console selected on this core.
                            Needs RTOS task support, i.e FreeRTOS, to run the reader task`,
            default: false,
            readOnly: !getSharedMemLogSupported(),
            hidden: !getSharedMemLogSupported(),
        },
    ]
    if(common.getSelfSysCfgCoreName().match(/a53*/)) {
        cfg.push(
            {
                name: "enableCssLog",
                displayName: "Enable CCS Log",
                description: "Logs string to CCS console. This needs CCS and JTAG connected to the EVM.",
                longDescription:
    `Enable CCS logging for A53 only when loading the apllication using CCS and JTAG connected.

    Do not enable CCS loging in A53 when booting using SBL. This can cause error while running the application.
    `,
                default: false,
            });
    }
    else {
        cfg.push(
            {
                name: "enableCssLog",
                displayName: "Enable CCS Log",
                description: "Logs string to CCS console. This needs CCS and JTAG connected to the EVM.",
                default: true,
            });
    }
    return cfg;
}

let debug_log_module = {
    displayName: "Debug Log",
    longDescription:
`Debug logging configuration, like UART, CCS and shared memory logging enable/disable.

When shared memory writer/reader is enabled, make sure to place the shared memory section
generated by SysCfg at the same location in the linker command file for all the cores.
Refer instructions in the generated ti_dpl_config.c for more details.
`,
    templates: {
        "/kernel/dpl/dpl_config.c.xdt": {
            dpl_config: "/kernel/dpl/debug_log.c.xdt",
            dpl_init: "/kernel/dpl/debug_log_init.c.xdt",
        },
        "/kernel/dpl/dpl_config.h.xdt": "/kernel/dpl/debug_log.h.xdt",
    },
    moduleStatic: {
        moduleInstances: function (inst) {
            let modInstances = new Array();

            if(inst.enableUartLog) {
                if(inst.uartTrace == true)
                {
                    let requiredArgument = {};
                    requiredArgument.uartTraceInstance = true;
                    modInstances.push({
                        name: "uartLog",
                        displayName: "UART",
                        description: "UART to use with the logger API.",
                        collapsed: false,
                        moduleName: '/drivers/uart/uart',
                        requiredArgs : requiredArgument,
                    });
                }
                else
                {
                    let requiredArgument = {};
                    requiredArgument.uartTraceInstance = false;
                    modInstances.push({
                        name: "uartLog",
                        displayName: "UART",
                        description: "UART to use with the logger API.",
                        collapsed: false,
                        moduleName: '/drivers/uart/uart',
                        requiredArgs : requiredArgument,
                    });
                }
            }

            if(inst.sysfwUartTrace == true)
            {
                let requiredArgument = {};

                    modInstances.push({
                    name: "sysfwUartLog",
                    displayName: "SysFw Trace UART",
                    collapsed: false,
                    moduleName: '/drivers/uart/uart_trace',
                    requiredArgs : requiredArgument,
                });
            }

            return (modInstances);
        },
    config : getConfig(),
    validate,
    },
    getCpuID,

};

exports = debug_log_module;

