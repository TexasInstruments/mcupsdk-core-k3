%%{
    let common = system.getScript("/common");
    let module = system.modules['/security/sa3ul/sa3ul'];
%%}
/*
 * SA3UL
 */
/* SA3UL Instance Macros */
#define CONFIG_SA3UL_CONSOLE            (0U)
#define CONFIG_SA3UL_NUM_INSTANCES      (1U)

#define SA3UL_HOST_DESCR_SIZE           (128U)
#define SA3UL_RING_ELSIZE_BYTES         (sizeof(uint64_t))
#define SA3UL_RING_CNT                  (2U)

#define SA3UL_RING_MEM_SIZE             (SA3UL_RING_ELSIZE_BYTES * SA3UL_RING_N_ELEMS)
#define SA3UL_RING_BACKING_MEM_SIZE     ((SA3UL_NUMBER_OF_RINGS + 1U) * SA3UL_RING_MEM_SIZE)
#define SA3UL_UDMA_DESCRITPOR_MEM_SIZE  (SA3UL_HOST_DESCR_SIZE * SA3UL_RING_N_ELEMS * 2U)

#define SA3UL_ENGINE_ENC                (1U)
#define SA3UL_ENGINE_AUTH               (1U)
#define SA3UL_ENGINE_TRNG               (0U)
#define SA3UL_ENGINE_PKA                (0U)
#define SA3UL_ENGINE_ENABLE             (SA3UL_ENGINE_ENC | (SA3UL_ENGINE_AUTH << 1) | \
                                            (SA3UL_ENGINE_TRNG << 3) | (SA3UL_ENGINE_PKA << 4))

static uint8_t gMemTxRing[SA3UL_RING_ELSIZE_BYTES * SA3UL_RING_CNT * 2] __attribute__ ((aligned (UDMA_CACHELINE_ALIGNMENT)));
static uint8_t gMemRxRing[SA3UL_RING_ELSIZE_BYTES * SA3UL_RING_CNT * 2] __attribute__ ((aligned (UDMA_CACHELINE_ALIGNMENT)));
static uint8_t gMemDescr[SA3UL_UDMA_DESCRITPOR_MEM_SIZE] __attribute__ ((aligned (UDMA_CACHELINE_ALIGNMENT)));

/* SA3UL atrributes */
SA3UL_Attrs gSA3ULAttrs[CONFIG_SA3UL_NUM_INSTANCES] =
{
    {
        .saBaseAddr         = CSL_SA3_SS0_REGS_BASE,
        .txPsilThreadId     = TX_PSIL_THREAD_ID,
        .rxPsil0ThreadId    = RX_PSIL0_THREAD_ID,
        .rxPsil1ThreadId    = RX_PSIL1_THREAD_ID,
        .numDesc            = 0,
        .descSize           = SA3UL_HOST_DESCR_SIZE,
        .descMemSize        = SA3UL_UDMA_DESCRITPOR_MEM_SIZE,
        .udmaSaTxGroupNum   = UDMA_MAPPED_TX_GROUP_SAUL,
        .udmaSaRxGroupNum   = UDMA_MAPPED_RX_GROUP_SAUL,
        .ringCnt            = SA3UL_RING_CNT,
        .contextIdStart     = 0x80,
        .contextIdMaxNum    = 16,
        .txRingNumInt       = 0,
        .rxRingNumInt       = 1,
        .swRingNumInt       = 2,
        .privId             = 0xc3,
        .priv               = 0,
        .secure             = 0,
    },
};

PKA_Attrs gPKA_Attrs[CONFIG_SA3UL_NUM_INSTANCES] =
{
    {
        .caBaseAddr         = CSL_SA3_SS0_REGS_BASE,
        .pkaBaseAddr        = CSL_SA3_SS0_EIP_29T2_BASE,
        .isOpen             = FALSE,
    },
};

/* SA3UL objects - initialized by the driver */
static SA3UL_Object gSA3ULObjects[CONFIG_SA3UL_NUM_INSTANCES];

/* SA3UL driver configuration */
SA3UL_Config gSa3ulConfig[CONFIG_SA3UL_NUM_INSTANCES] =
{
    {
        &gSA3ULAttrs[CONFIG_SA3UL_CONSOLE],
        &gSA3ULObjects[CONFIG_SA3UL_CONSOLE],
    },
};

PKA_Config gPkaConfig[CONFIG_SA3UL_NUM_INSTANCES] =
{
    {
        &gPKA_Attrs[CONFIG_SA3UL_CONSOLE],
    },
};

uint32_t gSa3ulConfigNum = CONFIG_SA3UL_NUM_INSTANCES;
uint32_t gPkaConfigNum   = CONFIG_SA3UL_NUM_INSTANCES;